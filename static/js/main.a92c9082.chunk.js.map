{"version":3,"sources":["serviceWorker.js","webPlatform/card.jsx","webPlatform/sData.jsx","webPlatform/cards.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","imgsrc","alt","title","name","href","link","target","sData","Cards","SData","map","val","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,KCKSC,MAnBf,SAAcC,GACV,OACI,oCACA,yBAAKC,UAAU,SACX,yBAAKA,UAAU,QACf,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,WAC5B,yBAAKH,UAAU,aACf,0BAAMA,UAAU,iBAAhB,IAAkCD,EAAMK,OACxC,wBAAIJ,UAAU,cAAcD,EAAMM,KAAlC,MACA,uBAAGC,KAAMP,EAAMQ,KAAMC,OAAO,OAC5B,qDCyFGC,EAtGD,CACV,CACIP,OAAS,oCACTE,MAAQ,0BACRC,KAAO,OACPE,KAAO,6CAEX,CACIL,OAAS,wEACTE,MAAO,0BACPC,KAAO,eACPE,KAAO,0CAEX,CACIL,OAAS,uCACTE,MAAQ,wBACRC,KAAO,kBACPE,KAAO,6CAGX,CACIL,OAAS,6DACTE,MAAQ,wBACRC,KAAO,SACPE,KAAO,iHAGX,CACIL,OAAS,sCACTE,MAAQ,wBACRC,KAAO,eACPE,KAAO,6CAGX,CACIL,OAAS,oCACTE,MAAQ,0BACRC,KAAO,OACPE,KAAO,6CAEX,CACIL,OAAS,wEACTE,MAAO,0BACPC,KAAO,eACPE,KAAO,0CAEX,CACIL,OAAS,uCACTE,MAAQ,wBACRC,KAAO,kBACPE,KAAO,6CAGX,CACIL,OAAS,6DACTE,MAAQ,wBACRC,KAAO,SACPE,KAAO,iHAGX,CACIL,OAAS,sCACTE,MAAQ,wBACRC,KAAO,eACPE,KAAO,6CAGX,CACIL,OAAS,oCACTE,MAAQ,0BACRC,KAAO,OACPE,KAAO,6CAEX,CACIL,OAAS,wEACTE,MAAO,0BACPC,KAAO,eACPE,KAAO,0CAEX,CACIL,OAAS,uCACTE,MAAQ,wBACRC,KAAO,kBACPE,KAAO,6CAGX,CACIL,OAAS,6DACTE,MAAQ,wBACRC,KAAO,SACPE,KAAO,iHAGX,CACIL,OAAS,sCACTE,MAAQ,wBACRC,KAAO,eACPE,KAAO,8CC1DAG,MAnBf,WACI,OACI,6BACCC,EAAMC,KAAI,SAACC,GACT,OACK,kBAAC,EAAD,CACCX,OAAUW,EAAIX,OACdE,MAASS,EAAIT,MACbC,KAAQQ,EAAIR,KACZE,KAAQM,EAAIN,YCrB7BO,IAASC,OACP,oCACA,wBAAIf,UAAU,iBAAd,sCACE,kBAAC,EAAD,OAEFgB,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a92c9082.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\n\nimport './webSeries.css';\n\nfunction Card(props){\n    return(\n        <>\n        <div className=\"cards\">\n            <div className=\"card\">\n            <img src={props.imgsrc} alt=\"poster\"></img>\n            <div className=\"card_info\">\n            <span className=\"card_category\"> {props.title}</span>\n            <h3 className=\"card_title\">{props.name}  </h3>\n            <a href={props.link} target=\"jai\">\n            <button> Watch Now </button>\n            </a>\n            </div>\n            </div>\n        </div>\n        </>\n    );\n}\n\nexport default Card;","\nconst sData = [\n    {\n        imgsrc : \"https://i.ibb.co/dQD4tyM/dark.jpg\",\n        title : 'netflix original series',\n        name : 'DarK',\n        link : 'https://www.netflix.com/in/title/80100172',\n    },\n    {\n        imgsrc : 'https://i.ibb.co/fNRQNnM/breaking-bad-season-6-poster-feature-666.jpg',\n        title: 'netflix original series',\n        name : 'Breaking Bad',\n        link : 'https://www.amc.com/shows/breaking-bad'\n    },\n    {\n        imgsrc : 'https://i.ibb.co/kGpCS1z/extracc.jpg',\n        title : 'Netflix Origin Series',\n        name : 'extracurricular',\n        link : 'https://www.netflix.com/in/title/80990668'\n    },\n    \n    {\n        imgsrc : 'https://i.ibb.co/VBk1gZw/Generated-by-IJG-JPEG-Library.jpg',\n        title : 'Netflix Origin Series',\n        name : 'Viking',\n        link : 'https://www.netflix.com/in/title/70301870#:~:text:Vikings%20%7C%20Netflix-,Vikings,Creators%3AMichael%20Hirst'\n    },\n    \n    {\n        imgsrc : 'https://i.ibb.co/d6dZnN5/sacred.jpg',\n        title : 'Netflix Origin Series',\n        name : 'Sacred Games',\n        link : 'https://www.netflix.com/in/title/80115328'\n    },\n\n    {\n        imgsrc : \"https://i.ibb.co/dQD4tyM/dark.jpg\",\n        title : 'netflix original series',\n        name : 'DarK',\n        link : 'https://www.netflix.com/in/title/80100172',\n    },\n    {\n        imgsrc : 'https://i.ibb.co/fNRQNnM/breaking-bad-season-6-poster-feature-666.jpg',\n        title: 'netflix original series',\n        name : 'Breaking Bad',\n        link : 'https://www.amc.com/shows/breaking-bad'\n    },\n    {\n        imgsrc : 'https://i.ibb.co/kGpCS1z/extracc.jpg',\n        title : 'Netflix Origin Series',\n        name : 'extracurricular',\n        link : 'https://www.netflix.com/in/title/80990668'\n    },\n    \n    {\n        imgsrc : 'https://i.ibb.co/VBk1gZw/Generated-by-IJG-JPEG-Library.jpg',\n        title : 'Netflix Origin Series',\n        name : 'Viking',\n        link : 'https://www.netflix.com/in/title/70301870#:~:text:Vikings%20%7C%20Netflix-,Vikings,Creators%3AMichael%20Hirst'\n    },\n    \n    {\n        imgsrc : 'https://i.ibb.co/d6dZnN5/sacred.jpg',\n        title : 'Netflix Origin Series',\n        name : 'Sacred Games',\n        link : 'https://www.netflix.com/in/title/80115328'\n    },\n\n    {\n        imgsrc : \"https://i.ibb.co/dQD4tyM/dark.jpg\",\n        title : 'netflix original series',\n        name : 'DarK',\n        link : 'https://www.netflix.com/in/title/80100172',\n    },\n    {\n        imgsrc : 'https://i.ibb.co/fNRQNnM/breaking-bad-season-6-poster-feature-666.jpg',\n        title: 'netflix original series',\n        name : 'Breaking Bad',\n        link : 'https://www.amc.com/shows/breaking-bad'\n    },\n    {\n        imgsrc : 'https://i.ibb.co/kGpCS1z/extracc.jpg',\n        title : 'Netflix Origin Series',\n        name : 'extracurricular',\n        link : 'https://www.netflix.com/in/title/80990668'\n    },\n    \n    {\n        imgsrc : 'https://i.ibb.co/VBk1gZw/Generated-by-IJG-JPEG-Library.jpg',\n        title : 'Netflix Origin Series',\n        name : 'Viking',\n        link : 'https://www.netflix.com/in/title/70301870#:~:text:Vikings%20%7C%20Netflix-,Vikings,Creators%3AMichael%20Hirst'\n    },\n    \n    {\n        imgsrc : 'https://i.ibb.co/d6dZnN5/sacred.jpg',\n        title : 'Netflix Origin Series',\n        name : 'Sacred Games',\n        link : 'https://www.netflix.com/in/title/80115328'\n    }\n\n]\n\nexport default sData;","import React, { Component } from 'react';\n\nimport './webSeries.css';\n\nimport Card from './card';\n\nimport SData from './sData';\n\n\n\n// function ncard(val){\n//    return(\n//    <Card\n//     imgsrc = {val.imgsrc}\n//     title = {val.title}\n//     name = {val.name}\n//     link = {val.link}\n//     />\n//    );\n// }\n\nfunction Cards(){\n    return(\n        <div>\n        {SData.map((val) => {\n           return(\n                <Card\n                 imgsrc = {val.imgsrc}\n                 title = {val.title}\n                 name = {val.name}\n                 link = {val.link}\n                 />\n                );    \n                \n        })}\n        </div>\n       \n    );\n}\n\nexport default Cards;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './webPlatform/webSeries.css';\n\nimport Cards from './webPlatform/cards'\n\n\nReactDOM.render(\n  <>\n  <h2 className=\"heading_style\" >List of Top Series on Netflix 2020</h2>\n    <Cards/>  \n  </>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}